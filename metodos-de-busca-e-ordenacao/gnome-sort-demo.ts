/**
 * DEMONSTRA√á√ÉO ESPECIAL: GNOME SORT
 * Implementa exatamente o exemplo dado no exerc√≠cio 7
 */

class GnomeSortDemo {
    
    /**
     * Executa o Gnome Sort exatamente como no exemplo do exerc√≠cio
     */
    static demonstrarGnomeSort(): void {
        // Array inicial conforme o exemplo
        const arr = [6, 2, 9, 4, 7, 1, 8, 5, 0];
        let posicao = 0;
        let passo = 0;
        
        console.log("üßô‚Äç‚ôÇÔ∏è DEMONSTRA√á√ÉO DO GNOME SORT");
        console.log("Exemplo exato do exerc√≠cio 7\n");
        
        console.log(`${passo.toString().padStart(2)}: [${arr.join(' ')}] - posi√ß√£o: ${posicao}`);
        
        while (posicao < arr.length) {
            if (posicao === 0) {
                // Condi√ß√£o limite 1: se n√£o houver vaso anterior, vai para o pr√≥ximo
                posicao++;
            } else {
                if (arr[posicao] >= arr[posicao - 1]) {
                    // Est√£o na ordem correta, avan√ßa
                    posicao++;
                } else {
                    // Fora de ordem, troca e volta
                    [arr[posicao], arr[posicao - 1]] = [arr[posicao - 1], arr[posicao]];
                    posicao--;
                    passo++;
                    console.log(`${passo.toString().padStart(2)}: [${arr.join(' ')}] - posi√ß√£o: ${posicao} (trocou e voltou)`);
                }
            }
        }
        
        console.log(`\n‚úÖ Ordena√ß√£o conclu√≠da em ${passo} passos`);
        console.log(`Resultado final: [${arr.join(' ')}]`);
    }
    
    /**
     * Vers√£o mais detalhada mostrando cada decis√£o do algoritmo
     */
    static gnomeSortDetalhado(arranjo: number[]): void {
        const arr = [...arranjo];
        let posicao = 0;
        let trocas = 0;
        let comparacoes = 0;
        
        console.log(`\nüîç GNOME SORT DETALHADO para [${arranjo.join(', ')}]`);
        console.log("=" .repeat(60));
        
        console.log(`Inicial: [${arr.join(' ')}] - gnomo na posi√ß√£o ${posicao}`);
        
        while (posicao < arr.length) {
            if (posicao === 0) {
                console.log(`\nüö∂ Posi√ß√£o ${posicao}: N√£o h√° vaso anterior, avan√ßa para posi√ß√£o ${posicao + 1}`);
                posicao++;
            } else {
                comparacoes++;
                console.log(`\nüëÄ Posi√ß√£o ${posicao}: Comparando vaso ${arr[posicao]} com vaso anterior ${arr[posicao - 1]}`);
                
                if (arr[posicao] >= arr[posicao - 1]) {
                    console.log(`‚úÖ ${arr[posicao]} >= ${arr[posicao - 1]} - Ordem correta, avan√ßa para posi√ß√£o ${posicao + 1}`);
                    posicao++;
                } else {
                    console.log(`‚ùå ${arr[posicao]} < ${arr[posicao - 1]} - Fora de ordem!`);
                    
                    // Troca
                    [arr[posicao], arr[posicao - 1]] = [arr[posicao - 1], arr[posicao]];
                    trocas++;
                    
                    console.log(`üîÑ Troca ${trocas}: [${arr.join(' ')}]`);
                    posicao--;
                    console.log(`‚¨ÖÔ∏è  Volta para posi√ß√£o ${posicao} para verificar o vaso que acabou de mover`);
                }
            }
        }
        
        console.log(`\nüéØ Algoritmo finalizado!`);
        console.log(`üìä Estat√≠sticas:`);
        console.log(`   - Total de compara√ß√µes: ${comparacoes}`);
        console.log(`   - Total de trocas: ${trocas}`);
        console.log(`   - Array final: [${arr.join(' ')}]`);
    }
    
    /**
     * Demonstra o conceito do gnomo com vasos de flores
     */
    static explicarConceito(): void {
        console.log("\nüå∏ CONCEITO DOS GNOMOS E VASOS DE FLORES");
        console.log("=" .repeat(50));
        console.log("O gnomo trabalha desta forma:");
        console.log("1. üëÄ Olha para o vaso atual e o vaso anterior");
        console.log("2. ‚úÖ Se est√£o em ordem (menor ‚Üí maior), avan√ßa");
        console.log("3. ‚ùå Se est√£o fora de ordem, troca os vasos");
        console.log("4. ‚¨ÖÔ∏è  Ap√≥s trocar, volta uma posi√ß√£o para verificar novamente");
        console.log("5. üîÑ Repete at√© chegar ao final");
        console.log("\nRegras especiais:");
        console.log("‚Ä¢ Se n√£o h√° vaso anterior (posi√ß√£o 0), apenas avan√ßa");
        console.log("‚Ä¢ Se n√£o h√° pr√≥ximo vaso, o trabalho terminou");
    }
    
    /**
     * Compara Gnome Sort com outros algoritmos simples
     */
    static compararComOutros(arranjo: number[]): void {
        console.log(`\nüìä COMPARA√á√ÉO DE ALGORITMOS SIMPLES`);
        console.log(`Array de teste: [${arranjo.join(', ')}]`);
        console.log("=" .repeat(60));
        
        // Gnome Sort
        console.log("\nüßô‚Äç‚ôÇÔ∏è GNOME SORT:");
        const gnomeResult = this.executarGnomeSort([...arranjo]);
        
        // Bubble Sort para compara√ß√£o
        console.log("\nü´ß BUBBLE SORT (para compara√ß√£o):");
        const bubbleResult = this.executarBubbleSort([...arranjo]);
        
        // Insertion Sort para compara√ß√£o  
        console.log("\nüìù INSERTION SORT (para compara√ß√£o):");
        const insertionResult = this.executarInsertionSort([...arranjo]);
        
        console.log("\nüìà RESUMO COMPARATIVO:");
        console.log("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        console.log("‚îÇ Algoritmo       ‚îÇ Compara√ß√µes ‚îÇ Trocas  ‚îÇ");
        console.log("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
        console.log(`‚îÇ Gnome Sort      ‚îÇ ${gnomeResult.comparacoes.toString().padStart(11)} ‚îÇ ${gnomeResult.trocas.toString().padStart(7)} ‚îÇ`);
        console.log(`‚îÇ Bubble Sort     ‚îÇ ${bubbleResult.comparacoes.toString().padStart(11)} ‚îÇ ${bubbleResult.trocas.toString().padStart(7)} ‚îÇ`);
        console.log(`‚îÇ Insertion Sort  ‚îÇ ${insertionResult.comparacoes.toString().padStart(11)} ‚îÇ ${insertionResult.trocas.toString().padStart(7)} ‚îÇ`);
        console.log("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
    }
    
    private static executarGnomeSort(arr: number[]): { comparacoes: number, trocas: number } {
        let posicao = 0;
        let trocas = 0;
        let comparacoes = 0;
        
        while (posicao < arr.length) {
            if (posicao === 0) {
                posicao++;
            } else {
                comparacoes++;
                if (arr[posicao] >= arr[posicao - 1]) {
                    posicao++;
                } else {
                    [arr[posicao], arr[posicao - 1]] = [arr[posicao - 1], arr[posicao]];
                    trocas++;
                    posicao--;
                }
            }
        }
        
        return { comparacoes, trocas };
    }
    
    private static executarBubbleSort(arr: number[]): { comparacoes: number, trocas: number } {
        let trocas = 0;
        let comparacoes = 0;
        
        for (let i = 0; i < arr.length - 1; i++) {
            for (let j = 0; j < arr.length - 1 - i; j++) {
                comparacoes++;
                if (arr[j] > arr[j + 1]) {
                    [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
                    trocas++;
                }
            }
        }
        
        return { comparacoes, trocas };
    }
    
    private static executarInsertionSort(arr: number[]): { comparacoes: number, trocas: number } {
        let trocas = 0;
        let comparacoes = 0;
        
        for (let i = 1; i < arr.length; i++) {
            const chave = arr[i];
            let j = i - 1;
            
            while (j >= 0) {
                comparacoes++;
                if (arr[j] > chave) {
                    arr[j + 1] = arr[j];
                    trocas++;
                    j--;
                } else {
                    break;
                }
            }
            arr[j + 1] = chave;
        }
        
        return { comparacoes, trocas };
    }
}

// Execu√ß√£o das demonstra√ß√µes
console.log("=== DEMONSTRA√á√ÉO ESPECIAL: GNOME SORT ===\n");

// Explica√ß√£o do conceito
GnomeSortDemo.explicarConceito();

// Demonstra√ß√£o com o exemplo exato do exerc√≠cio
GnomeSortDemo.demonstrarGnomeSort();

// Exemplo detalhado com array menor
console.log("\n" + "=".repeat(70));
const exemploDetalhado = [5, 2, 8, 1, 3];
GnomeSortDemo.gnomeSortDetalhado(exemploDetalhado);

// Compara√ß√£o com outros algoritmos
console.log("\n" + "=".repeat(70));
const exemploComparacao = [6, 2, 9, 4, 7, 1, 8, 5, 0];
GnomeSortDemo.compararComOutros(exemploComparacao);
